{"version":3,"sources":["index.js"],"names":["mapboxgl","accessToken","PYTHON_REST_SERVER_ENDPOINT","GEE_IMAGE_SERVER_ENDPOINT","draw","map","Application","props","state","lng","lat","zoom","Map","container","this","mapContainer","style","center","on","setState","getCenter","toFixed","getZoom","_center","turf","_circle","steps","units","addSource","type","data","addLayer","id","source","paint","MapboxDraw","defaultMode","displayControlsDefault","userProperties","modes","draw_circle","CircleMode","drag_circle","DragCircleMode","direct_select","DirectMode","simple_select","SimpleSelectMode","addControl","changeMode","e","nextImage","url","Promise","resolve","reject","fetch","then","response","json","_json","features","getAll","length","forEach","feature","properties","_get","radiusInKm","postFeatures","collectionid","sceneIds","eval","records","substring","indexOf","sceneId","undefined","addGEEImage","className","ref","el","onClick","bind","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8881f24a.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport mapboxgl from 'mapbox-gl';\nimport MapboxDraw from \"@mapbox/mapbox-gl-draw\";\nimport '@mapbox/mapbox-gl-draw/dist/mapbox-gl-draw.css';\nimport { CircleMode, DragCircleMode, DirectMode, SimpleSelectMode } from 'mapbox-gl-draw-circle';\nimport * as turf from \"@turf/turf\";\n\n/*global fetch*/\n//constants\nmapboxgl.accessToken = 'pk.eyJ1IjoiYmxpc2h0ZW4iLCJhIjoiMEZrNzFqRSJ9.0QBRA2HxTb8YHErUFRMPZg';\nconst PYTHON_REST_SERVER_ENDPOINT = 'https://andrewcottam.com:8081/python-rest-server/restor/services/';\nconst GEE_IMAGE_SERVER_ENDPOINT = 'https://geeimageserver.appspot.com/';\nvar draw, map;\nclass Application extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lng: -69.44916228299296,\n      lat: -12.833871131544694,\n      zoom: 17\n    };\n  }\n\n  componentDidMount() {\n    map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: 'mapbox://styles/mapbox/streets-v11',\n      center: [this.state.lng, this.state.lat],\n      zoom: this.state.zoom\n    });\n    map.on('move', () => {\n      this.setState({\n        lng: map.getCenter().lng.toFixed(4),\n        lat: map.getCenter().lat.toFixed(4),\n        zoom: map.getZoom().toFixed(2)\n      });\n    });\n    map.on('load', () => {\n      let _center = turf.point([0, 40]);\n      let _radius = 25;\n      let _options = {\n        steps: 80,\n        units: 'kilometers' // or \"mile\"\n      };\n      let _circle = turf.circle(_center, _radius, _options);\n      map.addSource(\"circleData\", {\n        type: \"geojson\",\n        data: _circle,\n      });\n      map.addLayer({\n        id: \"circle-fill\",\n        type: \"fill\",\n        source: \"circleData\",\n        paint: {\n          \"fill-color\": \"red\",\n          \"fill-opacity\": 1,\n        },\n      });\n      //create the draw control\n      draw = new MapboxDraw({\n        defaultMode: \"draw_circle\",\n        displayControlsDefault: false,\n        userProperties: true,\n        modes: {\n          ...MapboxDraw.modes,\n          draw_circle: CircleMode,\n          drag_circle: DragCircleMode,\n          direct_select: DirectMode,\n          simple_select: SimpleSelectMode\n        }\n      });\n      map.addControl(draw);\n      draw.changeMode('drag_circle');\n      map.on('draw.selectionchange', (e) => {\n        draw.changeMode('drag_circle');\n      });\n      //move to the first image\n      this.nextImage();\n    });\n  }\n  _get(url) {\n    return new Promise((resolve, reject) => {\n      fetch(url).then(response => {\n        response.json().then(_json => {\n          resolve(_json);\n        });\n      });\n    });\n  }\n\n  //writes the records to postgis\n  postFeatures() {\n    const features = draw && draw.getAll().features;\n    if (features && features.length > 0) {\n      features.forEach(feature => {\n        if (feature.properties.center.length > 0) {\n          const center = feature.properties.center;\n          this._get(PYTHON_REST_SERVER_ENDPOINT + \"set_tcd_feature?_id=\" + feature.id + \"&_longitude=\" + center[0] + \"&_latitude=\" + center[1] + \"&_radius=\" + (feature.properties.radiusInKm * 1000) + \"&_gee_imageid=\" + \"gee1234\" + \"&_entered_by=\" + \"andrew\");\n        }\n      });\n    }\n  }\n  //gets the next image using the current states lat/long\n  nextImage() {\n    this.postFeatures();\n    //get the scenes for the next lat/lng\n    const collectionid = 'GOOGLE/GEO/ALL/SATELLITE/WORLDVIEW3/ORTHO/RGB';\n    // const collectionid = 'LANDSAT/LC8_L1T_TOA';\n    this._get(GEE_IMAGE_SERVER_ENDPOINT + \"getIdsForPoint?lng=\" + this.state.lng + \"&lat=\" + this.state.lat + \"&collectionid=\" + collectionid).then(json => {\n      //the geeImageServer returns quasi-json data\n      const sceneIds = eval(json.records.substring(json.records.indexOf(\"[\"), json.records.length - 1));\n      //if there are scenes then get the first\n      const sceneId = (sceneIds.length) ? sceneIds[0] : undefined;\n      //load that scene\n      if (sceneId) this.addGEEImage(sceneId);\n    });\n  }\n  //loads a GEE scene from the geeImageServer\n  addGEEImage(sceneId) {\n    map.addSource('gee-source', {\n      'type': 'raster',\n      'tiles': [\n        'https://geeimageserver.appspot.com/ogc?service=WMS&request=GetMap&version=1.1.1&styles=&format=image%2Fpng&transparent=false&layers=[' + sceneId + ']&srs=EPSG%3A3857&bbox={bbox-epsg-3857}'\n      ],\n      'tileSize': 256\n    });\n    map.addLayer({\n        'id': 'gee-layer',\n        'type': 'raster',\n        'source': 'gee-source',\n        'paint': {}\n      },\n      \"gl-draw-polygon-fill-inactive.cold\");\n  }\n\n  render() {\n    return (\n      <div>\n        <div className='sidebarStyle'>\n          <div>Longitude: {this.state.lng} | Latitude: {this.state.lat} | Zoom: {this.state.zoom}</div>\n        </div>\n        <div ref={el => this.mapContainer = el} className='mapContainer' />\n        <div onClick={this.nextImage.bind(this)} className={'next'}>Next</div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Application />, document.getElementById('app'));\n"],"sourceRoot":""}